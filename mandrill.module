<?php

/**
 * @file
 * Enables Drupal to send email directly through MailChimp STS.
 *
 * Overriding mail handling in Drupal to make MailChimp STS the default
 * transport layer, requires to change the mail_system variable's
 * default value array('default-system' => 'DefaultMailSystem').
 * This module uses array('default-system' => 'MailChimpMandrillMailSystem').
 */


define('MANDRILL_QUEUE', 'mandrill_queue');

/**
 * Implements hook_help().
 */
function mandrill_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mandrill':
      return t('Allow for site emails to be sent through Mandrill.');
  }
}

/**
 * Implements hook_menu().
 */
function mandrill_menu() {
  $items = array();
  $items['admin/config/services/mandrill'] = array(
    'title' => 'Mandrill',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_admin_settings'),
    'access arguments' => array('administer mandrill'),
    'description' => 'Send emails through the Mandrill transactional email service.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/mandrill/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/services/mandrill/test'] = array(
    'title' => 'Send test email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_test_form'),
    'access callback' => 'mandrill_test_access',
    'description' => 'Send a test email using the Mandrill API.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Access callback for sending test email.
 *
 * @return bool
 *   True if current user has access to send test messages
 */
function mandrill_test_access() {
  $a = user_access('administer mandrill');
  $b = variable_get('mandrill_api_key');
  return $a & !empty($b);
}

/**
 * Implements hook_permission().
 */
function mandrill_permission() {
  return array(
    'administer mandrill' => array(
      'title' => t('Administer Mandrill'),
      'description' => t('Perform administration tasks for the Mandrill email service.'),
      "restrict access" => TRUE,
    ),
  );
}

/**
 * Implements hook_mail().
 */
function mandrill_mail($key, &$message, $params) {
  if ($key == 'mandrill_test') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if ($params['include_attachment']) {
      $message['attachments'][] = drupal_realpath('misc/druplicon.png');
      $message['body'] .= '  ' . t('The Drupal icon is included as an attachment to test the attachment functionality.');
    }
  }
}

/**
 * Abstracts sending of messages to allow immediate or queued for cron.
 * 
 * @param array $message
 *   a message array formatted for Mandrill's sending API
 * @param array $template_args
 *   An array containing 2 items: 'id' and 'template_content'
 * @param null $mailer
 *   the Mandrill API object, if the caller has it handy.
 * 
 * @return bool
 *   TRUE if no exception thrown
 */
function mandrill_mailsend($message, $template_args, $mailer = NULL) {
  if (is_null($mailer)) {
    $mailer = mandrill_get_api_object();
  }
  try {
    $results = NULL;
    if (is_null($template_args)) {
      $results = $mailer->messages_send($message);
    }
    else {
      $results = $mailer->messages_send_template($template_args['id'], $template_args['template_content'], $message);
    }
    foreach ($results as $result) {
      switch ($result['status']) {
        case "error":
        case "invalid":
        case "rejected":
          watchdog('mandrill', 'Failed sending email to %to. @status: @message',
            array(
              '%to' => $result['email'],
              '@status' => $result['status'],
              '@message' => $result['message'],
            ),
            WATCHDOG_ERROR
          );
          break;

        case "queued":
          watchdog('mandrill', 'Email to %to queued by Mandrill App.',
            array(
              '%to' => $result['email'],
            ),
            WATCHDOG_NOTICE
          );
          break;

      }
    }
    return TRUE;
  }
  catch (Mandrill_Exception $e) {
    watchdog('mandrill', 'Error sending email from %from to %to. @code: @message',
      array(
        '%from' => $message['from'],
        '%to' => $message['to'],
        '@code' => $e->getCode(),
        '@message' => $e->getMessage(),
      ),
      WATCHDOG_ERROR
    );

    return FALSE;
  }
}

/**
 * Get a Mandrill API object for communication with the mailchimp server.
 */
function mandrill_get_api_object() {
  $api_key = variable_get('mandrill_api_key', '');
  if (empty($api_key)) {
    return FALSE;
  }

  $api = new Mandrill($api_key, 60);

  return $api;
}

/**
 * Get a list of mandrill template objects.
 *
 * @return array
 *   an of available templates with complete data or NULL if none are available
 */
function mandrill_get_templates() {
  // Only show the template settings if the mandrill api can be called.
  $templates = NULL;
  try {
    $mailer = mandrill_get_api_object();
    $templates = $mailer->templates_list();
  }
  catch (Mandrill_Exception $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => check_plain($e->getMessage()))), 'error');
    watchdog_exception('mandrill', $e);
  }
  return $templates;
}

/**
 * Helper to return a comma delimited list of mail keys to not log content for.
 *
 * @return string
 *   a comma delimited list of mail keys
 */
function mandrill_mail_key_blacklist() {
  return variable_get('mandrill_mail_key_blacklist', 'user_password_reset');
}

/**
 * Helper to generate an array of recipients.
 *
 * @param mixed $to
 *   a comma delimited list of email addresses
 * 
 * @return array
 *   array of email addresses
 */
function mandrill_get_to($to) {
  $recipients = array();
  if ($to_array = explode(',', $to)) {
    foreach ($to_array as $email) {
      $recipients[] = array('email' => $email);
    }
  }
  else {
    $recipients[] = array('email' => $to);
  }
  return $recipients;
}

/**
 * Implements hook_cron().
 */
function mandrill_cron() {
  $queue = DrupalQueue::get(MANDRILL_QUEUE, TRUE);
  $mailer = mandrill_get_api_object();
  $limit = variable_get('mandrill_batch_limit', 50);
  if ($limit == 0 || !mandrill_process_async()) {
    $limit = -1;
    // Otherwise our loop never begins when $limit is set to 0
    // Also, if async has been disabled, we fire off the rest
    // of the existing Queue on the next cron call.
  }
  for ($delta = 0; $delta != $limit; $delta++) {
    // We can't test using claimItem() as part of the loop conditional,
    // or we will accidentally pop an extra item off the queue
    // and have the lease on that item for the next hour, locking it.
    $item = $queue->claimItem();
    if (!$item) {
      break;
    }
    $email = $item->data;
    mandrill_mailsend($email['message'], $email['template_args'], $mailer);
    // Remove item from queue.
    $queue->deleteItem($item);
  }
}

/**
 * Determine if mail should be processed asynchronously.
 *
 * @return bool
 *   True if asyncronous processing is enabled
 */
function mandrill_process_async() {
  return variable_get('mandrill_process_async', FALSE);
}

