<?php

/**
 * @file
 * Enables Drupal to send email directly through MailChimp STS.
 *
 * Overriding mail handling in Drupal to make MailChimp STS the default
 * transport layer, requires to change the mail_system variable's
 * default value array('default-system' => 'DefaultMailSystem').
 * This module uses array('default-system' => 'MailChimpMandrillMailSystem').
 */

/**
 * Implements hook_help().
 */
function mandrill_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mandrill':
      return t('Allow for site emails to be sent through Mandrill.');
  }
}

/**
 * Implements hook_menu().
 */
function mandrill_menu() {
  $items = array();
  $items['admin/config/services/mandrill'] = array(
    'title' => 'Mandrill',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_admin_settings'),
    'access arguments' => array('administer mandrill'),
    'description' => 'Send emails through the Mandrill transactional email service.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/mandrill/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/services/mandrill/test'] = array(
    'title' => 'Send test email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_test_form'),
    'access callback' => 'mandrill_test_access',
    'description' => 'Send a test email using the Mandrill API.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/services/mandrill/templates'] = array(
    'title' => 'Templates',
    'page callback' => 'mandrill_template_map_overview_page',
    'access callback' => 'mandrill_template_map_access',
    'description' => 'Configure mappings and usage for Mandrill Templates.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/config/services/mandrill/templates/add'] = array(
    'title' => 'Add a template map',
    'description' => 'Add a mapping for a Mandrill template.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_template_map_form'),
    'access callback' => 'mandrill_template_map_access',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function mandrill_entity_info() {
  $return = array(
    'mandrill_template_map' => array(
      'label' => t('Mandrill Template Map'),
      'plural label' => t('Mandrill Template Maps'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'MandrillTemplateMap',
      'base table' => 'mandrill_template_map',
      'uri callback' => 'mandrill_template_map_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'label callback' => 'entity_class_label',
      'module' => 'mandrill',
      'access callback' => 'mandrill_template_map_access',
      'entity keys' => array(
        'id' => 'mandrill_template_map_entity_id',
        'label' => 'label',
      ),
      'bundles' => array(
        'mandrill_template_map' => array(
          'label' => t('Mandrill Template Map'),
        ),
      ),
      'admin ui' => array(
        'path' => 'admin/config/services/mandrill/templates',
        'file' => 'mandrill.admin.inc',
        'controller class' => 'MandrillTemplateMapUIController',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Access callback for mandrill_template_map
 *
 * @return bool
 */
function mandrill_template_map_access() {
  $a = user_access('administer mandrill');
  $b = variable_get('mandrill_api_key');
  return $a & !empty($b);
}

/**
 * Access callback for sending test email.
 *
 * @return bool
 */
function mandrill_test_access() {
  $a = user_access('administer mandrill');
  $b = variable_get('mandrill_api_key');
  return $a & !empty($b);
}

/**
 * Implements hook_permission().
 */
function mandrill_permission() {
  return array(
    'administer mandrill' => array(
      'title' => t('Administer Mandrill'),
      'description' => t('Perform administration tasks for the Mandrill email service.'),
      "restrict access" => TRUE
    ),
  );
}

/**
 * Implements hook_mail().
 */
function mandrill_mail($key, &$message, $params) {
  if ($key == 'mandrill_test') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if ($params['include_attachment']) {
      $message['attachments'][] = drupal_realpath('misc/druplicon.png');
      $message['body'] .= '  ' . t('The Drupal icon is included as an attachment to test the attachment functionality.');
    }
  }
}


/**
 * Get a Mandrill API object for communication with the mailchimp server.
 */
function mandrill_get_api_object() {
  $api_key = variable_get('mandrill_api_key', '');
  if (empty($api_key)) {
    return FALSE;
  }

  $api = new Mandrill($api_key, 60);

  return $api;
}

/**
 * Get a list of mandrill template objects.
 *
 * @return array of available templates with complete data or NULL if none
 * are available
 */
function mandrill_get_templates() {
  // Only show the template settings if the mandrill api can be called.
  $templates = NULL;
  try {
    $mailer = mandrill_get_api_object();
    $templates = $mailer->templates_list();
  }
  catch (Mandrill_Exception $e) {
    drupal_set_message(t('Mandrill: ' . check_plain($e->getMessage()), 'error'));
    watchdog_exception('mandrill', $e);
  }
  return $templates;
}

/**
 * Helper to return a comma delimited list of mail keys to not log content for.
 *
 * @return string
 */
function mandrill_mail_key_blacklist() {
  return variable_get('mandrill_mail_key_blacklist', 'user_password_reset');
}

/**
 * Loads a single mandrill_template_map or all of them if no name provided.
 *
 * @param null $name
 *
 * @return array
 */
function mandrill_template_map_load_entities($name = NULL) {
  $maps = entity_load_multiple_by_name('mandrill_template_map', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($maps) : $maps;
}

/**
 * @param $key
 *
 * returns a mandrill_template_map entity which has been assigned to the mailsystem key designated,
 * or NULL if none is assigned.
 */

function mandrill_template_map_assigned_template($key) {
  $maps = mandrill_template_map_load_entities();
  foreach ($maps as $map) {
    if ($map->mailsystem_key == $key) {
      return $map;
    }
  }
  return NULL;
}

/**
 * mandrill_template_map_usage_chart returns an array with indexes
 * matching each module which is assigned to use Mandrill for email
 * sends, and values equal to the template_map_ids that are assigned
 * to those modules. If no template maps are assigned, the value is
 * set to NULL.
 *
 * @return array
 */
function mandrill_template_map_usage_chart() {
  $system_assignments = mailsystem_get();
  //filter out the systems that aren't using Mandrill:
  foreach ($system_assignments as $system => $assignment) {
    if ($assignment != 'MandrillMailSystem')
      unset($system_assignments[$system]);
    else $system_assignments[$system] = NULL;
  }
  $maps = mandrill_template_map_load_entities();
  foreach ($maps as $map) {
    if (isset($map->mailsystem_key) && array_key_exists($map->mailsystem_key, $system_assignments)) {
      $system_assignments[$map->mailsystem_key] = $map->mandrill_template_map_entity_id;
    }
  }
  //@todo consider sorting these in some display-friendly way.
  return $system_assignments;
}

/**
 * Helper to generate an array of recipients.
 *
 * @param mixed $to
 *
 * @return array
 */
function mandrill_get_to($to) {
  //@todo: extract name and add to associative array.

  $recipients = array();
  if ($to_array = explode(',', $to)) {
    foreach ($to_array as $email) {
      $recipients[] = array('email' => $email);
    }
  }
  else {
    $recipients[] = array('email' => $to);
  }
  return $recipients;
}
