<?php

/**
 * @file
 * Enables Drupal to send email directly through MailChimp STS.
 *
 * Overriding mail handling in Drupal to make MailChimp STS the default
 * transport layer, requires to change the mail_system variable's
 * default value array('default-system' => 'DefaultMailSystem').
 * This module uses array('default-system' => 'MailChimpMandrillMailSystem').
 */

define('MANDRILL_STATUS_ON', 'on');
define('MANDRILL_STATUS_OFF', 'off');
define('MANDRILL_STATUS_TEST', 'test');

/**
 * Implements hook_help().
 */
function mandrill_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mandrill':
      return t('Allow for site emails to be sent through Mandrill.');
  }
}

/**
 * Implements hook_menu().
 */
function mandrill_menu() {
  $items['admin/config/services/mandrill'] = array(
    'title' => 'Mandrill',
    'page callback' => 'mandrill_user_info_page',
    'access arguments' => array('administer mandrill'),
    'description' => 'View summary information for the API connected user.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/mandrill/info'] = array(
    'title' => 'User info',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );
  $items['admin/config/services/mandrill/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_admin_settings'),
    'access arguments' => array('administer mandrill'),
    'description' => 'Allow for site emails to be sent through MailChimp STS.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/mandrill/test'] = array(
    'title' => 'Send test email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_test_form'),
    'access callback' => 'mandrill_test_access',
    'description' => 'Send a test email using the Mandrill API.',
    'file' => 'mandrill.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  return $items;
}

/**
 * Access callback for sending test email.
 *
 * @return bool
 */
function mandrill_test_access() {
  return user_access('administer mandrill') &
    (variable_get('mandrill_status', MANDRILL_STATUS_OFF) != MANDRILL_STATUS_OFF);
}

/**
 * Implements hook_permission().
 */
function mandrill_permission() {
  return array(
    'administer mandrill' => array(
      'title' => t('Administer Mandrill'),
      'description' => t('Perform administration tasks for the Mandrill email service.'),
    ),
  );
}

/**
 * Implements hook_mail().
 */
function mandrill_mail($key, &$message, $params) {
  if ($key == 'mandrill-test') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}

/**
 * Displays summary information for the active API user.
 */
function mandrill_user_info_page() {
  $info = mandrill_user_info();

  $header = array(
    t('Range'),
    t('Sent'),
    t('hard_bounces'),
    t('soft_bounces'),
    t('Rejects'),
    t('Complaints'),
    t('Unsubs'),
    t('Opens'),
    t('unique_opens'),
    t('Clicks'),
    t('unique_clicks'),
  );

  $rows = array();
  foreach ($info['stats'] as $key => $stat) {
    $rows[] = array(
      str_replace('_', ' ', $key),
      $stat['sent'],
      $stat['hard_bounces'],
      $stat['soft_bounces'],
      $stat['rejects'],
      $stat['complaints'],
      $stat['unsubs'],
      $stat['opens'],
      $stat['unique_opens'],
      $stat['clicks'],
      $stat['unique_clicks']
    );
  }

  $render = array(
    'info' => array(
      '#theme' => 'table',
      '#rows' => array(
        array(t('Username'), $info['username']),
        array(t('Reputation'), $info['reputation']),
        array(t('Hourly quota'), $info['hourly_quota']),
        array(t('Backlog'), $info['backlog']),
      ),
      '#header' => array(t('Attribute'), t('Value')),
      '#caption' => t('Active API user information.')
    ),
    'stats' => array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
      '#caption' => t('This table contains an aggregate summary of the account\'s sending stats.')
    )
  );

  return $render;
}

/**
 * Get all available MailChimp STS tags
 *
 * @return array of tag objects
 */
function mandrill_get_tags() {
  $ret = array();

  $mandrill = mandrill_get_api_object();
  $tags = $mandrill->tags_list();
  if ($tags) {
    foreach ($tags as $tag) {
      $ret[$tag['tag_id']] = $tag;
    }
  }

  return $ret;
}

/**
 * Get a Mandrill API object for communication with the mailchimp server.
 */
function mandrill_get_api_object() {
  $api_key = variable_get('mandrill_api_key', '');
  if (empty($api_key)) {
    return FALSE;
  }

  $api = new Mandrill($api_key, 60);

  return $api;
}

/**
 * Returns user information for the active API user.
 *
 * @return array
 */
function mandrill_user_info() {
  $info = drupal_static(__FUNCTION__);
  if (!$info) {
    $mandrill = mandrill_get_api_object();
    $info = $mandrill->users_info();
  }
  return $info;
}

