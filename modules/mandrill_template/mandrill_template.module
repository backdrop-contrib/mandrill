<?php

/**
 * @file
 * Enables Drupal to send email directly through MailChimp STS.
 *
 * Overriding mail handling in Drupal to make MailChimp STS the default
 * transport layer, requires to change the mail_system variable's
 * default value array('default-system' => 'DefaultMailSystem').
 * This module uses array('default-system' => 'MailChimpMandrillMailSystem').
 */

/**
 * Implements hook_entity_info().
 */
function mandrill_template_entity_info() {
  $return = array(
    'mandrill_template_map' => array(
      'label' => t('Mandrill Template Map'),
      'plural label' => t('Mandrill Template Maps'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'MandrillTemplateMap',
      'base table' => 'mandrill_template_map',
      'uri callback' => 'mandrill_template_map_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'mandrill_template',
      'access callback' => 'mandrill_template_map_access',
      'entity keys' => array(
        'id' => 'mandrill_template_map_entity_id',
        'label' => 'label',
        'name' => 'name',
      ),
      'admin ui' => array(
        'path' => 'admin/config/services/mandrill/templates',
        'file' => 'mandrill_template.admin.inc',
        'controller class' => 'MandrillTemplateMapUIController',
      ),
    ),
  );

  return $return;
}

/**
 * Access callback for mandrill_template_map.
 *
 * @return bool
 *   True if current user has acces to template maps, else false
 */
function mandrill_template_map_access() {
  $a = user_access('configure mandrill templates');
  $b = variable_get('mandrill_api_key');
  return $a & !empty($b);
}

/**
 * Implements hook_permission().
 */
function mandrill_template_permission() {
  return array(
    'configure mandrill templates' => array(
      'title' => t('Configure Mandrill Templates'),
      'description' => t('Select & configure which Mandrill Templates to use for messages going through Mandrill.'),
      "restrict access" => FALSE,
    ),
  );
}

/**
 * Loads a single mandrill_template_map or all of them if no name provided.
 *
 * @param null $name
 *   name of the template map entity
 *
 * @return array
 *   array of template_map entities
 */
function mandrill_template_map_load_entities($name = NULL) {
  $maps = entity_load_multiple_by_name('mandrill_template_map', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($maps) : $maps;
}

/**
 * Tells you which template_map is configured for a mailsystem key, if any.
 * 
 * @param string $mailsystemkey
 *   as seen in mailsystem
 *
 * @return mandrill_template_map
 *   or null
 */
function mandrill_template_map_load_entity_by_key($mailsystemkey) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'mandrill_template_map')
    ->propertyCondition('mailsystem_key', $mailsystemkey)
    ->addMetaData('account', user_load(1));
  $query_result = $query->execute();
  $template_map = NULL;
  if (!empty($query_result['mandrill_template_map'])) {
    $maps = entity_load('mandrill_template_map', array_keys($query_result['mandrill_template_map']));
    $template_map = array_pop($maps);
  }

  return $template_map;
}

/**
 * Get all mailsystem keys pointed at mandrill and their template mappings.
 * 
 * @return array
 *   returns an array with indexes matching each module which is assigned
 *   to use Mandrill for email sends, and values equal to the template_map_ids
 *   that are assigned to those modules. If no template maps are assigned, the
 *   value is set to NULL.
 */
function mandrill_template_map_usage_chart() {
  $system_assignments = mailsystem_get();
  // Filter out the systems that aren't using Mandrill:
  foreach ($system_assignments as $system => $assignment) {
    if ($assignment != 'MandrillMailSystem') {
      unset($system_assignments[$system]);
    }
    else {
      $system_assignments[$system] = NULL;
    }
  }
  $maps = mandrill_template_map_load_entities();
  foreach ($maps as $map) {
    if (isset($map->mailsystem_key) && array_key_exists($map->mailsystem_key, $system_assignments)) {
      $system_assignments[$map->mailsystem_key] = $map->mandrill_template_map_entity_id;
    }
  }
  uksort($system_assignments, '_mandrill_template_map_mailsystem_sort');
  return $system_assignments;
}

/**
 * Implements hook_mandrill_mail_alter
 */
function mandrill_template_mandrill_mail_alter(&$mandrill_message, &$message){
  $template_map = mandrill_template_map_load_entity_by_key($message['id']);
  // If no template map is registered to this key, is one registered as the default?
  if (!$template_map) {
    $template_map = mandrill_template_map_load_entity_by_key('default-system');
  }
  if ($template_map) {
    $mandrill_message['send_function'] = 'mandrill_template_sender';
    $mandrill_message['args'] = $template_map->message_send_arguments($mandrill_message);
  }
}

/**
 * A sender function as specified in mandrill module
 * 
 * This function checks for appropriate settings in the message,
 * then uses the template API call to send the message if the settings are valid.
 * 
 * @param $message
 *
 * @return array|Mandrill_Exception
 */
function mandrill_template_sender($message) {
  $mailer = mandrill_get_api_object();
  if (is_null($message['args']['id']) || is_null($message['args']['template_content'])) {

    return mandrill_sender_plain($message);
  }
  else {
    // Strip message data used by the Mandrill module before handing off to Mandrill API:
    $id = $message['args']['id'];
    $template_content = $message['args']['template_content'];
    unset($message['args']);
    unset($message['send_function']);
    
    return $mailer->messages_send_template($id, $template_content, $message);
  }
}

/**
 * Simple sorting algorithm to organize mailsystems arrays in a logical way.
 * 
 * @param string $a
 *   a mailsystem key name
 * @param string $b
 *   a mailsystem key name
 * 
 * @return int
 *   Negative if $a should come before $b, else positive.
 */
function _mandrill_template_map_mailsystem_sort($a, $b) {
  $first = "default-system";
  $last = "mandrill_test";
  if ($a == $first || $b == $last) {
    return -1;
  }
  if ($b == $first || $a == $last) {
    return 1;
  }
  // Otherwise sort alphabetically, case-agnostic
  return strcasecmp($a, $b);
}
